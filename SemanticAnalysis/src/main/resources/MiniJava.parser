: classFile = org.dalingtao.sa.sample.ast.MiniJavaSemantics

INTEGER
| int

BOOLEAN
| boolean

VAL
| INTEGER
| VAR
| ( EXPR )
| BOOLEAN
| VAL [ EXPR ]
| FUNCTION ( ARG_LIST )

TYPE
| id

EXPR_NOT
| VAL
| ! VAL

EXPR_MUL
| EXPR_NOT
| EXPR_MUL * VAL
| EXPR_MUL / VAL

EXPR_PLUS
| EXPR_MUL
| EXPR_PLUS + EXPR_MUL
| EXPR_PLUS - EXPR_MUL

EXPR_COMP
| EXPR_PLUS
| EXPR_PLUS eq EXPR_PLUS
| EXPR_PLUS neq EXPR_PLUS
| EXPR_PLUS lt EXPR_PLUS
| EXPR_PLUS gt EXPR_PLUS
| EXPR_PLUS geq EXPR_PLUS
| EXPR_PLUS leq EXPR_PLUS

EXPR_AND
| EXPR_COMP
| EXPR_AND && EXPR_COMP

EXPR_OR
| EXPR_AND
| EXPR_OR || EXPR_AND

EXPR
| EXPR_OR

SET
| VAR assign EXPR

VAR
| id

VAR_DEF
| TYPE VAR
| TYPE SET
| TYPE VAR [ EXPR ]

RETURN
| return EXPR

IF_FLOW
| if ( EXPR ) SCOPE_BEGIN STATEMENTS SCOPE_END ELSE_FLOW

SCOPE_BEGIN
| {
SCOPE_END
| }

ELSE_FLOW
|
| else SCOPE_BEGIN STATEMENTS SCOPE_END

WHILE_FLOW
| while ( EXPR ) SCOPE_BEGIN STATEMENTS SCOPE_END

FUNCTION
| id

ARG_DEF
| VAR : TYPE ,

ARG_DEF_LIST
|
| ARG_DEF_LIST ARG_DEF

ARG
| EXPR ,

ARG_LIST
|
| ARG_LIST ARG

FUNCTION_DEF
| TYPE FUNCTION ( ARG_DEF_LIST ) SCOPE_BEGIN STATEMENTS SCOPE_END

STATEMENT
| VAR_DEF ;
| SET ;
| SCOPE_BEGIN STATEMENTS SCOPE_END
| IF_FLOW
| WHILE_FLOW
| EXPR ;
| RETURN ;

STATEMENTS
| STATEMENT STATEMENTS
|

PROGRAM
| FUNCTION_DEF
| PROGRAM FUNCTION_DEF